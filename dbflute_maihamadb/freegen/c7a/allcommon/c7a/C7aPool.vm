##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package org.dbflute.c7a;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Date;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.HostDistance;
import com.datastax.driver.core.PoolingOptions;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.TypeCodec;
import com.datastax.driver.extras.codecs.MappingCodec;
import com.datastax.driver.extras.codecs.jdk8.LocalDateCodec;
import com.datastax.driver.extras.codecs.jdk8.LocalTimeCodec;

/**
 * C7aPool.
 * @author FreeGen
 */
public class C7aPool {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected Cluster cluster;

    protected Session session;

    private String host;

    private Integer port;

    // ===================================================================================
    //                                                                     Pool Management
    //                                                                     ===============
    @PostConstruct
    public void init() {
        // TODO #c7a pri.C Cassandra接続設定を整理する。 by p1us2er0 (2018/06/13)
        // https://docs.datastax.com/en/developer/java-driver/3.2/manual/pooling/
        cluster = Cluster.builder()
                .addContactPoint(host)
                .withPort(port)
                .withPoolingOptions(new PoolingOptions().setCoreConnectionsPerHost(HostDistance.LOCAL, 4)
                        .setMaxConnectionsPerHost(HostDistance.LOCAL, 10)
                        .setCoreConnectionsPerHost(HostDistance.REMOTE, 2)
                        .setMaxConnectionsPerHost(HostDistance.REMOTE, 4)
                        .setHeartbeatIntervalSeconds(60)
                        .setMaxRequestsPerConnection(HostDistance.LOCAL, 32768)
                        .setMaxRequestsPerConnection(HostDistance.REMOTE, 2000))
                .build();
        cluster.getConfiguration().getCodecRegistry().register(LocalDateCodec.instance);
        cluster.getConfiguration().getCodecRegistry().register(LocalTimeCodec.instance);
        cluster.getConfiguration().getCodecRegistry().register(LocalDateTimeCodec.instance);
    }

    private static class LocalDateTimeCodec extends MappingCodec<LocalDateTime, Date> {

        public static final LocalDateTimeCodec instance = new LocalDateTimeCodec();

        public LocalDateTimeCodec() {
            super(TypeCodec.timestamp(), java.time.LocalDateTime.class);
        }

        @Override
        protected LocalDateTime deserialize(Date value) {
            if (value == null) {
                return null;
            }
            return LocalDateTime.ofInstant(value.toInstant(), ZoneId.systemDefault());
        }

        @Override
        protected Date serialize(LocalDateTime value) {
            if (value == null) {
                return null;
            }
            return Date.from(ZonedDateTime.of(value, ZoneId.systemDefault()).toInstant());
        }
    }

    public Session getResource(String keyspace) {
        return cluster.connect(keyspace);
    }

    @PreDestroy
    public void destroy() {
        cluster.close();
    }

    public void setHost(String host) {
        this.host = host;
    }

    public void setPort(Integer port) {
        this.port = port;
    }
}
