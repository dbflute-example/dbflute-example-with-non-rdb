##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package org.dbflute.c7a.bhv;

import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.dbflute.bhv.exception.BehaviorExceptionThrower;
import org.dbflute.c7a.C7aPool;
import org.dbflute.c7a.cbean.C7aConditionBean;
import org.dbflute.c7a.entity.C7aEntity;
import org.dbflute.c7a.entity.C7aPagingResultBean;
import org.dbflute.optional.OptionalEntity;
import org.dbflute.util.DfCollectionUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.datastax.driver.core.PagingState;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Statement;
import com.datastax.driver.mapping.Mapper;
import com.datastax.driver.mapping.MappingManager;
import com.datastax.driver.mapping.Result;

/**
 * @author FreeGen
 */
public abstract class AbstractC7aBehaviorReadable<ENTITY extends C7aEntity, CB extends C7aConditionBean> {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    private static final Logger logger = LoggerFactory.getLogger(AbstractC7aBehaviorReadable.class);

    // ===================================================================================
    //                                                                                Base
    //                                                                                ====
    protected abstract C7aPool getC7aPool();

    protected abstract String getKeyspace();

    protected abstract CB newConditionBean();

    protected abstract Class<ENTITY> typeOfSelectedEntity();

    protected <R> R execute(Function<Mapper<ENTITY>, R> mapperLambda) {
        MappingManager mappingManager = getC7aPool().getResource(getKeyspace());
        Mapper<ENTITY> mapper = mappingManager.mapper(typeOfSelectedEntity());
        return mapperLambda.apply(mapper);
    }

    // ===================================================================================
    //                                                                        Count Select
    //                                                                        ============
    public int selectCount(Consumer<CB> cbLambda) {
        CB cb = newConditionBean();
        cbLambda.accept(cb);
        Statement selectCount = cb.buildSelectCount();
        logger.debug("#c7a cql={}", selectCount.toString());
        int count = execute(mapper -> {
            ResultSet resultSet = mapper.getManager().getSession().execute(selectCount);
            Row row = resultSet.one();
            return row == null ? 0 : (int) row.getLong(0);
        });
        return count;
    }

    // ===================================================================================
    //                                                                       Entity Select
    //                                                                       =============
    public OptionalEntity<ENTITY> selectEntity(Consumer<CB> cbLambda) {
        CB cb = newConditionBean();
        cbLambda.accept(cb);
        Statement statement = cb.buildSelect();
        logger.debug("#c7a cql={}", statement.toString());
        Result<ENTITY> result = execute(mapper -> {
            ResultSet resultSet = mapper.getManager().getSession().execute(statement);
            return mapper.map(resultSet);
        });

        Iterator<ENTITY> iterator = result.iterator();
        if (!iterator.hasNext()) {
            return OptionalEntity.ofNullable(null, () -> {
                createBehaviorExceptionThrower().throwSelectEntityAlreadyDeletedException(statement);
            });
        }
        ENTITY entity = iterator.next();
        if (iterator.hasNext()) {
            createBehaviorExceptionThrower().throwSelectEntityDuplicatedException("1 < resultCount", statement, null);
        }
        markAsSelect(cb, entity);
        return OptionalEntity.of(entity);
    }

    // ===================================================================================
    //                                                                         List Select
    //                                                                         ===========
    // #hope #c7a pri.C p1us2er0 selectList, selectPage asserts the setting of page type. (2018/06/14)
    public List<ENTITY> selectList(Consumer<CB> cbLambda) {
        CB cb = newConditionBean();
        cbLambda.accept(cb);
        Statement statement = cb.buildSelect();

        logger.debug("#c7a cql={}", statement.toString());
        List<ENTITY> entityList = execute(mapper -> {
            ResultSet resultSet = mapper.getManager().getSession().execute(statement);
            return StreamSupport.stream(mapper.map(resultSet).spliterator(), false).collect(Collectors.toList());
        });
        entityList.forEach(entity -> markAsSelect(cb, entity));
        return entityList;
    }

    // ===================================================================================
    //                                                                         Page Select
    //                                                                         ===========
    public C7aPagingResultBean<ENTITY> selectPage(Consumer<CB> cbLambda) {
        CB cb = newConditionBean();
        cbLambda.accept(cb);
        Statement select = cb.buildSelect();

        logger.debug("#c7a cql={}", select.toString());
        C7aPagingResultBean<ENTITY> pagingResultBean = execute(mapper -> {
            ResultSet resultSet = mapper.getManager().getSession().execute(select);
            Result<ENTITY> result = mapper.map(resultSet);
            PagingState nextPage = result.getExecutionInfo().getPagingState();
            int remaining = result.getAvailableWithoutFetching();
            // result.all () ignores the fetch size internally and gets all the results. by p1us2er0 (2018/07/31)
            Iterator<ENTITY> iterator = result.iterator();
            List<ENTITY> list = DfCollectionUtil.newArrayList();
            while (iterator.hasNext() && remaining != 0) {
                ENTITY entity = iterator.next();
                markAsSelect(cb, entity);
                list.add(entity);
                remaining--;
            }
            C7aPagingResultBean<ENTITY> bean = new C7aPagingResultBean<ENTITY>();
            bean.setSelectedList(list);
            if (nextPage != null) {
                bean.setPagingState(nextPage.toString());
            }
            return bean;
        });

        pagingResultBean.setTableDbName(cb.asTableDbName());
        pagingResultBean.setPageSize(cb.getFetchSize());
        if (cb.canPagingCount()) {
            if (cb.getPagingState() == null && pagingResultBean.size() < cb.getFetchSize()) {
                pagingResultBean.setAllRecordCount(pagingResultBean.size());
            } else {
                int allRecordCount = selectCount(cbLambda);
                pagingResultBean.setAllRecordCount(allRecordCount);
            }
        }

        return pagingResultBean;
    }

    // ===================================================================================
    //                                                                               Other
    //                                                                               =====
    protected void markAsSelect(CB cb, ENTITY entity) {
        entity.markAsSelect();
        if (cb.specify().hasSpecifiedColumn()) {
            entity.modifiedToSpecified();
            cb.specify().getSpecifyColumns().stream().forEach(specifyColumn -> entity.myspecifyProperty(specifyColumn));
        }
    }

    protected BehaviorExceptionThrower createBehaviorExceptionThrower() {
        return new BehaviorExceptionThrower();
    }
}
