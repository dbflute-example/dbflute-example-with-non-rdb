##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package org.dbflute.c7a.entity;

import java.util.Set;

import org.dbflute.c7a.entity.dbmeta.C7aDBMeta;

/**
 * @author FreeGen
 */
public interface C7aEntity {

    // ===================================================================================
    //                                                                             DB Meta
    //                                                                             =======
    /**
     * Handle the meta as DBMeta, that has all info of the table.
     * @return The (singleton) instance of DB meta for the table. (NotNull)
     */
    C7aDBMeta asDBMeta();

    /**
     * Handle the meta as table DB name, that can be identity of table.
     * @return The (fixed) DB name of the table. (NotNull)
     */
    String asTableDbName(); // not use 'get' for quiet

    // ===================================================================================
    //                                                                 Modified Properties
    //                                                                 ===================
    // -----------------------------------------------------
    //                                              Modified
    //                                              --------
    /**
     * Get the set of modified properties. (basically for Framework) <br>
     * The properties needs to be according to Java Beans rule. <br>
     * @return The set of property name for modified columns, read-only. (NotNull)
     */
    Set<String> mymodifiedProperties(); // 'my' take on unique-driven

    /**
     * Modify the property without setting value. (basically for Framework) <br>
     * The property name needs to be according to Java Beans rule.
     * @param propertyName The property name of modified column. (NotNull)
     */
    void mymodifyProperty(String propertyName);

    /**
     * Cancel the modified the property without resetting value. (basically for Framework) <br>
     * The property name needs to be according to Java Beans rule.
     * @param propertyName The property name of specified column. (NotNull)
     */
    void mymodifyPropertyCancel(String propertyName);

    /**
     * Clear the information of modified properties. (basically for Framework)
     */
    void clearModifiedInfo();

    /**
     * Does it have modifications of property names. (basically for Framework)
     * @return The determination, true or false.
     */
    boolean hasModification();

    // -----------------------------------------------------
    //                                             Specified
    //                                             ---------
    /**
     * Copy to modified properties to specified properties. <br>
     * It means non-specified columns are checked
     */
    void modifiedToSpecified();

    /**
     * Get the set of specified properties. (basically for Framework) <br>
     * The properties needs to be according to Java Beans rule.
     * @return The set of property name for specified columns, read-only. (NotNull: if empty, no check)
     */
    Set<String> myspecifiedProperties(); // 'my' take on unique-driven

    /**
     * Specify the property without setting value. (basically for Framework) <br>
     * The property name needs to be according to Java Beans rule.
     * @param propertyName The property name of specified column. (NotNull)
     */
    void myspecifyProperty(String propertyName); // e.g. called by null object handling

    /**
     * Cancel the specified the property without resetting value. (basically for Framework) <br>
     * The property name needs to be according to Java Beans rule.
     * @param propertyName The property name of specified column. (NotNull)
     */
    void myspecifyPropertyCancel(String propertyName);

    /**
     * Clear the information of specified properties. (basically for Framework) <br>
     * It means no check of access to non-specified columns.
     */
    void clearSpecifiedInfo();

    // ===================================================================================
    //                                                                     Birthplace Mark
    //                                                                     ===============
    /**
     * Mark as select that means the entity is created by DBFlute select process. (basically for Framework) <br>
     * e.g. determine columns of batch insert
     */
    void markAsSelect();

    /**
     * Is the entity created by DBFlute select process? (basically for Framework)
     * @return The determination, true or false.
     */
    boolean createdBySelect();
}
