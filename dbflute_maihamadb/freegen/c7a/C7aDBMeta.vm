##
## Copyright 2017-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#set ($rule = $scriptEngine.get('c7aRule'))
${manager.allClassCopyright}package ${data.package};
#set ($importList = [])
#set($added = $importList.add('java.util.Map'))
#set($added = $importList.add('org.dbflute.util.DfCollectionUtil'))
#generateImports($importList, $data.package, $scriptEngine.invokeMethod($rule, 'importOrderList'))

/**
 * The DB Meta class as ${data.tableName} for c7a of ${data.c7a.schema}.
 * @author FreeGen
 */
public class ${data.className} extends $data.extendsClass {

    // ===================================================================================
    //                                                                           Singleton
    //                                                                           =========
    private static final ${data.className} _instance = new ${data.className}();

    private ${data.className}() {
    }

    public static ${data.className} getInstance() {
        return _instance;
    }

    // ===================================================================================
    //                                                                          Table Info
    //                                                                          ==========
    @Override
    public String getTableDbName() {
        return "${data.tableName}";
    }

    @Override
    public Map<String, String> asTableDbNameMap() {
#set($tableDbNameMap = {})
#set($nomal = '')
#foreach($clustering in $data.clusteringColumnList)
#set($velocityIndex = $velocityCount - 1)
#set($nomal = $nomal + $clustering + ' ' + $data.clusteringOrderList[$velocityIndex].toLowerCase() + ', ')
#end
#set($put = $tableDbNameMap.put($nomal, $data.tableName))
#foreach($materializedViewMeta in $data.materializedViewMetaList)
#set($nomal = '')
#foreach($clustering in $materializedViewMeta.clusteringColumnList)
#set($velocityIndex = $velocityCount - 1)
#set($nomal = $nomal + $clustering + ' ' + $materializedViewMeta.clusteringOrderList[$velocityIndex].toLowerCase() + ', ')
#end
#set($put = $tableDbNameMap.put($nomal, $materializedViewMeta.name))
#end
        Map<String, String> map = DfCollectionUtil.newLinkedHashMap();
#foreach($entry in $tableDbNameMap.entrySet())
        map.put("$entry.key", "$entry.value");
        map.put("$entry.key.replaceAll(' asc, ', ' xxx, ').replaceAll(' desc, ', ' asc, ').replaceAll('xxx, ', 'desc, ')", "$entry.value");
#end
        return map;
    }

    // ===================================================================================
    //                                                                        Various Info
    //                                                                        ============
#set ($optimisticLock = "")
#foreach($property in $data.properties)
#if($property.name.equalsIgnoreCase($data.c7a.optimisticLock.fieldName))
#set ($optimisticLock = $data.c7a.optimisticLock.fieldName)
#end
#end
    @Override
    public boolean hasVersionNo() {
#if($optimisticLock == "")
        return false;
#else
        return true;
#end
    }

    @Override
    public String getVersionNoColumnName() {
#if($optimisticLock == "")
        return null;
#else
        return "$optimisticLock";
#end
    }
}
