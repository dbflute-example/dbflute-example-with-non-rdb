##
## Copyright 2017-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#set ($rule = $scriptEngine.get('c7aRule'))
${manager.allClassCopyright}package ${data.package};
#set ($importList = [])
#if(!$data.materializedViewMetaList.isEmpty())
#set($added = $importList.add('org.dbflute.cbean.sqlclause.orderby.OrderByElement'))
#end
#set($added = $importList.add('org.dbflute.kvs.core.assertion.KvsAssertion'))
#foreach($userType in $data.userTypeList)
#set($added = $importList.add("$data.exUserTypeMap[$userType].package.$data.exUserTypeMap[$userType].className"))
#end
#generateImports($importList, $data.package, $scriptEngine.invokeMethod($rule, 'importOrderList'))

/**
 * The conditionQuery class as ${data.tableName} for c7a of ${data.c7a.schema}.
 * @author FreeGen
 */
public abstract class ${data.className}#if ($data.extendsClass && $data.extendsClass != '') extends $data.extendsClass#end#if ($data.implementsClasses && $data.implementsClasses != '') implements $data.implementsClasses#end {
#foreach($property in $data.properties)
#set($nestList = [])
#generateConditionQueryProperty($data, $property)
#set($nestList = [])
#end
#foreach($property in $data.properties)
#set($nestList = [])
#generateC7aEqual($data, $property)
#set($nestList = [])
#end
#foreach($property in $data.properties)
#set($orderBy = false)
#foreach($clustering in $data.clusteringColumnList)
#if($property.name == $clustering)
#set($orderBy = true)
#end
#end
#foreach($materializedViewMeta in $data.materializedViewMetaList)
#foreach($clustering in $materializedViewMeta.clusteringColumnList)
#if($property.name == $clustering)
#set($orderBy = true)
#end
#end
#end
#if($orderBy)
#set($nestList = [])
#generateC7aOrderBy($data, $property)
#set($nestList = [])
#end
#end
}
## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## generate c7a property.
## @param class class (NotNull)
## @param property property (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(generateConditionQueryProperty, $data, $property)

#generateIndent($nestList.size())/** The property of ${property.fieldName}. (NullAllowed) */
#generateIndent($nestList.size())protected $property.fieldClass _$property.fieldName;
#end
## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## generate c7a equal.
## @param class class (NotNull)
## @param property property (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(generateC7aEqual, $data, $property)

#generateIndent($nestList.size())/**
#generateIndent($nestList.size()) * [get] ${property.fieldName} Equal <br>
#generateIndent($nestList.size()) * @return The value of the column '${property.name}'. (NullAllowed)
#generateIndent($nestList.size()) */
#generateIndent($nestList.size())public $property.fieldClass get${manager.initCap($property.fieldName)}_Equal() {
#generateIndent($nestList.size())    return _$property.fieldName;
#generateIndent($nestList.size())}

#generateIndent($nestList.size())/**
#generateIndent($nestList.size()) * [set] ${property.fieldName} Equal <br>
#generateIndent($nestList.size()) * @param ${property.fieldName} The value of the column ${property.name}. (NotNull)
#generateIndent($nestList.size()) */
#generateIndent($nestList.size())public void set${manager.initCap($property.fieldName)}_Equal($property.fieldClass ${property.fieldName}) {
#generateIndent($nestList.size())    KvsAssertion.assertNullQuery("${property.fieldName}", _${property.fieldName});
#generateIndent($nestList.size())    _$property.fieldName = $property.fieldName;
#generateIndent($nestList.size())}
#end
## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## generate c7a orderBy.
## @param class class (NotNull)
## @param property property (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(generateC7aOrderBy, $data, $property)

#generateIndent($nestList.size())public ${data.className} addOrderBy_${manager.initCap($property.fieldName)}_Asc() {
#generateIndent($nestList.size())    OrderByElement orderByElement = createOrderByElement("$property.fieldName", "$property.name");
#generateIndent($nestList.size())    orderByElement.setupAsc();
#generateIndent($nestList.size())    getOrderByList().add(orderByElement);
#generateIndent($nestList.size())    return this;
#generateIndent($nestList.size())}

#generateIndent($nestList.size())public ${data.className} addOrderBy_${manager.initCap($property.fieldName)}_Desc() {
#generateIndent($nestList.size())    OrderByElement orderByElement = createOrderByElement("$property.fieldName", "$property.name");
#generateIndent($nestList.size())    orderByElement.setupDesc();
#generateIndent($nestList.size())    getOrderByList().add(orderByElement);
#generateIndent($nestList.size())    return this;
#generateIndent($nestList.size())}
#end
