##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${data.package};

import org.dbflute.kvs.cache.cbean.KvsCacheConditionBean;
import org.dbflute.optional.OptionalThing;

import ${data.dbflute.exConditionBean.package}.${data.dbflute.exConditionBean.className};
import ${data.exConditionQuery.package}.${data.exConditionQuery.className};

/**
 * The base condition-bean of (${data.comment})${data.tableName}.
 * @author FreeGen
 */
public abstract class ${data.className} implements KvsCacheConditionBean {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    protected Integer fetchSize;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${data.exConditionQuery.className} _conditionQuery;
    protected boolean kvsCacheAsyncReflectionEnabled = ${data.kvs.kvsCacheAsyncReflectionEnabled};

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    public ${data.exConditionQuery.className} query() {
        return doGetConditionQuery();
    }

    protected ${data.exConditionQuery.className} doGetConditionQuery() {
        if (_conditionQuery == null) {
            _conditionQuery = new ${data.exConditionQuery.className}();
        }
        return _conditionQuery;
    }

    public void fetchFirst(int fetchSize) {
        this.fetchSize = fetchSize;
    }

    // ===================================================================================
    //                                                                             xget...
    //                                                                             =======
    public OptionalThing<Integer> xgetFetchFirst() {
        return OptionalThing.ofNullable(fetchSize, () -> {
            throw new IllegalStateException("'fetchFirst(int)' has not been called.");
        });
    }

    // ===================================================================================
    //                                                                               to...
    //                                                                               =====
    public ${data.dbflute.exConditionBean.className} to${data.dbflute.exConditionBean.className}() {
        ${data.dbflute.exConditionBean.className} cb = new ${data.dbflute.exConditionBean.className}();

        // where
        query().xdfgetColumnEqualValue().entrySet().stream().forEach(entry -> {
            cb.query().invokeQueryEqual(entry.getKey().getColumnDbName(), entry.getValue());
        });

        // orderBy
        query().xdfgetColumnOrderBy().entrySet().stream().forEach(entry -> {
            cb.query().invokeOrderBy(entry.getKey().getColumnDbName(), entry.getValue());
        });

        // fetchFirst
        xgetFetchFirst().ifPresent(fetchSize -> cb.fetchFirst(fetchSize));

        return cb;
    }

    // ===================================================================================
    //                                                                          Sync/Async
    //                                                                          ==========
    public void enableKvsCacheAsyncReflection() {
        kvsCacheAsyncReflectionEnabled = true;
    }

    public void disableKvsCacheAsyncReflection() {
        kvsCacheAsyncReflectionEnabled = false;
    }

    public boolean isKvsCacheAsyncReflectionEnabled() {
        return kvsCacheAsyncReflectionEnabled;
    }
}
