##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.package}.${tableMap.schema}.cbean.bs;

import org.dbflute.kvs.cache.cbean.KvsCacheConditionBean;
import org.dbflute.optional.OptionalThing;

import ${tableMap.dbflutePackage}.cbean.${table.camelizedName}CB;
import ${request.package}.${tableMap.schema}.cbean.cq.Kvs$!{tableMap.schemaPrefix}${table.camelizedName}CQ;

/**
 * The base condition-bean of (${table.comment})${table.capCamelName}.
 * @author FreeGen
 */
public abstract class Kvs$!{tableMap.schemaPrefix}Bs${table.camelizedName}CB implements KvsCacheConditionBean {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    protected Integer fetchSize;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected Kvs$!{tableMap.schemaPrefix}${table.camelizedName}CQ _conditionQuery;

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    public Kvs$!{tableMap.schemaPrefix}${table.camelizedName}CQ query() {
        return doGetConditionQuery();
    }

    protected Kvs$!{tableMap.schemaPrefix}${table.camelizedName}CQ doGetConditionQuery() {
        if (_conditionQuery == null) {
            _conditionQuery = new Kvs$!{tableMap.schemaPrefix}${table.camelizedName}CQ();
        }
        return _conditionQuery;
    }

    public void fetchFirst(int fetchSize) {
        this.fetchSize = fetchSize;
    }

    // ===================================================================================
    //                                                                             xget...
    //                                                                             =======
    public OptionalThing<Integer> xgetFetchFirst() {
        return OptionalThing.ofNullable(fetchSize, () -> {
            throw new IllegalStateException("'fetchFirst(int)' has not been called.");
        });
    }

    // ===================================================================================
    //                                                                               to...
    //                                                                               =====
    public ${table.camelizedName}CB to${table.camelizedName}CB() {
        ${table.camelizedName}CB cb = new ${table.camelizedName}CB();

        // where
        query().xdfgetColumnEqualValue().entrySet().stream().forEach(entry -> {
            cb.query().invokeQueryEqual(entry.getKey().getColumnDbName(), entry.getValue());
        });

        // orderBy
        query().xdfgetColumnOrderBy().entrySet().stream().forEach(entry -> {
            cb.query().invokeOrderBy(entry.getKey().getColumnDbName(), entry.getValue());
        });

        // fetchFirst
        xgetFetchFirst().ifPresent(fetchSize -> cb.fetchFirst(fetchSize));

        return cb;
    }
}