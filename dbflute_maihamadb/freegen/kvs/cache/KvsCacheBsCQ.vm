##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${data.package};

import java.util.Comparator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.function.Predicate;

import org.dbflute.dbmeta.info.ColumnInfo;
import org.dbflute.kvs.core.assertion.KvsAssertion;
import org.dbflute.util.DfCollectionUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ${data.dbflute.dbMeta.package}.${data.dbflute.dbMeta.className};
import ${data.dbflute.exEntity.package}.${data.dbflute.exEntity.className};

/**
 * The base condition-query of (${data.comment})${data.tableName}.
 * @author FreeGen
 */
public abstract class ${data.className} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    private static final Logger logger = LoggerFactory.getLogger(${data.className}.class);

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${data.dbflute.dbMeta.className} dbMeta = ${data.dbflute.dbMeta.className}.getInstance();
    protected Comparator<${data.dbflute.exEntity.className}> orderBy;
    protected Map<ColumnInfo, Object> columnEqualValue = DfCollectionUtil.newHashMap();
    protected Map<ColumnInfo, Boolean> columnOrderBy = DfCollectionUtil.newHashMap();

    // ===================================================================================
    //                                                                           Condition
    //                                                                           =========
#set ($targetdb = $data.dbflute.instance)
#set ($dbTable = $targetdb.getTable($data.tableName))
#foreach ($dbColumn in $dbTable.columnList)
#set ($initCapName = ${manager.initCap($dbColumn.javaName)})
#set ($fieldName =  ${manager.initUncap($dbColumn.javaName)})
    public void set${initCapName}_Equal(${dbColumn.javaNative} ${fieldName}) {
        KvsAssertion.assertNullQuery("${fieldName}", columnEqualValue.get(dbMeta.column${initCapName}()));
        columnEqualValue.put(dbMeta.column${initCapName}(), ${fieldName});
    }

    public void addOrderBy_${initCapName}_Asc() {
        columnOrderBy.put(dbMeta.column${initCapName}(), true);

        orderBy = (orderBy == null) ? //
                Comparator.comparing(${data.dbflute.exEntity.className}::get${initCapName}, Comparator.naturalOrder())
                : orderBy.thenComparing(${data.dbflute.exEntity.className}::get${initCapName}, Comparator.naturalOrder());
    }

    public void addOrderBy_${initCapName}_Desc() {
        columnOrderBy.put(dbMeta.column${initCapName}(), false);

        orderBy = (orderBy == null) ? //
                Comparator.comparing(${data.dbflute.exEntity.className}::get${initCapName}, Comparator.reverseOrder())
                : orderBy.thenComparing(${data.dbflute.exEntity.className}::get${initCapName}, Comparator.reverseOrder());
    }

#end
    // ===================================================================================
    //                                                                        Assist Logic
    //                                                                        ============
    public Comparator<${data.dbflute.exEntity.className}> getOrderByComparator() {
        return orderBy;
    }

    public Predicate<${data.dbflute.exEntity.className}> getWherePredicate() {
        return entity -> {
            for (Entry<ColumnInfo, Object> entry : columnEqualValue.entrySet()) {
                Object value = entry.getKey().read(entity);
                logger.debug("filter [{}] CB[{}] = RECORD[{}]\n", entry.getKey().getColumnDbName(), entry.getValue(), value);

                if (value == null) {
                    return false;
                }

                if (!value.equals(entry.getValue())) {
                    return false;
                }
            }

            return true;
        };
    }

    public Map<ColumnInfo, Object> xdfgetColumnEqualValue() {
        return columnEqualValue;
    }

    public Map<ColumnInfo, Boolean> xdfgetColumnOrderBy() {
        return columnOrderBy;
    }
}
