##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package org.dbflute.kvs.cache;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.dbflute.Entity;
import org.dbflute.dbmeta.DBMeta;
import org.dbflute.dbmeta.accessory.ColumnNullObjectable;
import org.dbflute.dbmeta.info.ColumnInfo;
import org.dbflute.dbmeta.info.PrimaryInfo;
import org.dbflute.kvs.cache.facade.KvsCacheFacade;
import org.dbflute.kvs.core.exception.KvsException;
import org.dbflute.optional.OptionalEntity;
import org.dbflute.util.DfCollectionUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author FreeGen
 */
public class KvsCacheColumnNullObject {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    protected static final KvsCacheColumnNullObject _instance = new KvsCacheColumnNullObject();

    private static final Logger logger = LoggerFactory.getLogger(KvsCacheColumnNullObject.class);

    public static KvsCacheColumnNullObject getInstance() {
        return _instance;
    }

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected Map<String, KvsCacheFacade> _kvsCacheFacadeMap;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    protected KvsCacheColumnNullObject() {
    }

    // ===================================================================================
    //                                                                                Init
    //                                                                                ====
    public void init(Map<String, KvsCacheFacade> kvsCacheFacadeMap) {
        _kvsCacheFacadeMap = kvsCacheFacadeMap;
    }

    // ===================================================================================
    //                                                                        Column Cache
    //                                                                        ============
    public <PROP> PROP findColumn(Entity entity, String columnName, Object primaryKey) {
        logger.debug("tableName={}, columnName={}, primaryKey={}", entity.asTableDbName(), columnName, primaryKey);
        if (primaryKey == null) { // basically no way, just in case
            return null;
        }
        final DBMeta dbMeta = entity.asDBMeta();
        final Set<ColumnInfo> specifiedColumnInfoSet = dbMeta.getColumnInfoList()
                .stream()
                .filter(columnInfo -> columnInfo.getPropertyName().equalsIgnoreCase(columnName))
                .limit(1)
                .collect(Collectors.toSet());
        if (specifiedColumnInfoSet.isEmpty()) {
            specifiedColumnInfoSet.addAll(dbMeta.getColumnInfoList());
        }

        logger.debug("specifiedColumnInfoSet={}", specifiedColumnInfoSet);

        final OptionalEntity<Entity> optCached = getKvsCacheFacade(dbMeta).findEntityById(primaryKey, dbMeta, specifiedColumnInfoSet);

        if (!optCached.isPresent()) {
            return null;
        }

        Entity cached = optCached.get();

        if (cached instanceof ColumnNullObjectable) {
            ((ColumnNullObjectable) cached).disableColumnNullObject();
        }

        try {
            PROP value = read(columnName, cached);
            logger.debug("tableName={}, columnName={}, primaryKey={}, value={}", entity.asTableDbName(), columnName, primaryKey, value);
            return value;
        } finally {
            if (cached instanceof ColumnNullObjectable) {
                ((ColumnNullObjectable) cached).enableColumnNullObject();
            }
        }
    }

    protected <PROP> PROP read(String columnName, Entity cached) {
        return findColumnInfo(cached.asDBMeta(), columnName).read(cached);
    }

    protected ColumnInfo findColumnInfo(DBMeta dbMeta, String columnName) {
        return dbMeta.findColumnInfo(columnName);
    }

    /**
     * Load thread cache and KVS cache including target column(s) of ColumnNullObjectable.
     * @param dbMeta DBMeta
     * @param list A list of Entity objects
     */
    public void loadThreadCache(DBMeta dbMeta, List<? extends Entity> list) {
        final List<Object> idList = DfCollectionUtil.newArrayList();
        final Set<ColumnInfo> specifiedColumnInfoSet = DfCollectionUtil.newHashSet();
        list.stream().forEach(entity -> {
            PrimaryInfo primaryInfo = entity.asDBMeta().getPrimaryInfo();
            if (primaryInfo.isCompoundKey()) {
                throw new KvsException("This method is not available with concatenated primary key: " + primaryInfo);
            }
            idList.add(primaryInfo.getFirstColumn().getPropertyGateway().read(entity));
            specifiedColumnInfoSet.addAll(dbMeta.getColumnInfoList()
                    .stream()
                    .filter(columnInfo -> entity.myspecifiedProperties().contains(columnInfo.getPropertyName()))
                    .collect(Collectors.toSet()));
        });

        if (specifiedColumnInfoSet.isEmpty()) {
            specifiedColumnInfoSet.addAll(dbMeta.getColumnInfoList());
        }

        getKvsCacheFacade(dbMeta).loadThreadCacheByIds(idList, dbMeta, specifiedColumnInfoSet);
    }

    protected KvsCacheFacade getKvsCacheFacade(DBMeta dbMeta) {
        return _kvsCacheFacadeMap.get(dbMeta.getProjectName());
    }
}
