##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#set ($rule = $scriptEngine.get('kvsRule'))
${manager.allClassCopyright}package org.dbflute.kvs.store;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.dbflute.kvs.store.entity.KvsStoreEntity;
import org.dbflute.kvs.store.entity.dbmeta.KvsStoreDBMeta;

/**
 * @author FreeGen
 */
public class KvsStoreConverterHandler {

    // ===================================================================================
    //                                                                        to MapString
    //                                                                        ============
    /**
     * Convert an Entity object to a MapString in KVS represented by String.
     * @param entity Entity of DBFlute (NotNull)
     * @param <ENTITY> Entity class of DBFlute
     * @return A String value representing MapString in KVS (NotNull)
     */
    public <ENTITY extends KvsStoreEntity> String toMapString(ENTITY entity) {
        return toMapString(entity.asDBMeta().extractAllColumnMap(entity));
    }

    /**
     * Convert Entity objects in the assigned list to MapString values in KVS represented by String.
     * @param entityList A list of Entity objects (NotNull)
     * @param <ENTITY> Entity class of DBFlute
     * @return A list of String values representing MapString in KVS (NotNull)
     */
    public <ENTITY extends KvsStoreEntity> List<String> toMapStringList(List<ENTITY> entityList) {
        List<String> list = entityList.stream().map(entity -> {
            return toMapString(entity.asDBMeta().extractAllColumnMap(entity));
        }).collect(Collectors.toList());
        return list;
    }

    // ===================================================================================
    //                                                                           to Entity
    //                                                                           =========
    /**
     * Convert A MapString in KVS represented by Java String to an Entity object.
     * @param mapString A String value representing MapString (NotNull)
     * @param dbmeta DBMeta (NotNull)
     * @param <ENTITY> Entity class of DBFlute
     * @return An Entity object of DBFlute (NotNull)
     */
    @SuppressWarnings("unchecked")
    public <ENTITY extends KvsStoreEntity> ENTITY toEntity(String mapString, KvsStoreDBMeta kvsStoreDBMeta) {
        KvsStoreEntity entity = kvsStoreDBMeta.newKvsStoreEntity();
        kvsStoreDBMeta.acceptAllColumnMap(entity, fromMapString(mapString));
        return (ENTITY) entity;
    }

     /**
     * Convert Mapstrings in KVS represented by Java String to Entity objects.
     * @param mapStringList A list of String values representing MapString (NotNull)
     * @param dbmeta DBMeta (NotNull)
     * @param <ENTITY> Entity class of DBFlute
     * @return A list of Entity objects of DBFlute (NotNull)
     */
    @SuppressWarnings("unchecked")
    public <ENTITY extends KvsStoreEntity> List<ENTITY> toEntityList(List<String> mapStringList, KvsStoreDBMeta kvsStoreDBMeta) {
        List<KvsStoreEntity> entityList = mapStringList.stream().map(mapString -> {
            KvsStoreEntity entity = kvsStoreDBMeta.newKvsStoreEntity();
            kvsStoreDBMeta.acceptAllColumnMap(entity, fromMapString(mapString));
            return entity;
        }).collect(Collectors.toList());
        return (List<ENTITY>) entityList;
    }

    // ===================================================================================
    //                                                                           Converter
    //                                                                           =========
    protected String toMapString(Map<String, ? extends Object> map) {
        return $scriptEngine.invokeMethod($rule, 'converterHandler').toMapString;
    }

    protected Map<String, Object> fromMapString(String mapString) {
        return $scriptEngine.invokeMethod($rule, 'converterHandler').fromMapString;
    }
}
