##
## Copyright 2014-2016 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${request.package}.cbean.bs;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import org.dbflute.solr.cbean.AbstractSolrConditionBean;
import org.dbflute.solr.cbean.AbstractSolrSpecification;
import org.dbflute.solr.cbean.SolrFilterQueryBean;
import org.dbflute.solr.cbean.SolrQBCall;
import org.dbflute.solr.cbean.SolrQueryBean;
import org.dbflute.solr.cbean.SolrSpecification;

import ${request.package}.bsentity.meta.Solr${tableMap.schema}Dbm;
import ${request.package}.cbean.cfq.Solr${tableMap.schema}CFQ;
import ${request.package}.cbean.cq.Solr${tableMap.schema}CQ;

/**
 * Base ConditionBean class of Solr schema "${tableMap.schema}."
 * @author FreeGen
 */
public class SolrBs${tableMap.schema}CB extends AbstractSolrConditionBean {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected Solr${tableMap.schema}CQ queryBean;

    protected Solr${tableMap.schema}CFQ filterQueryBean;

    protected HpSpecification specification;

    protected List<Solr${tableMap.schema}CQ> facetQueryList;

    protected HpSpecification facetSpecification;

    public Solr${tableMap.schema}CQ query() {
        if (this.queryBean == null) {
            this.queryBean = new Solr${tableMap.schema}CQ();
        }
        return this.queryBean;
    }

    public Solr${tableMap.schema}CFQ filterQuery() {
        if (this.filterQueryBean == null) {
            this.filterQueryBean = new Solr${tableMap.schema}CFQ();
        }
        return this.filterQueryBean;
    }

    public HpSpecification specify() {
        this.setSpecified(true);
        if (this.specification == null) {
            this.specification = new HpSpecification();
        }
        return this.specification;
    }

    @Override
    public String[] getAllFields() {
        return Stream.of(Solr${tableMap.schema}Dbm.values()).map(dbm -> dbm.fieldName()).toArray(count -> new String[count]);
    }

    @Override
    protected SolrQueryBean getQueryBean() {
        return this.query();
    }

    @Override
    protected SolrFilterQueryBean getFilterQueryBean() {
        return this.filterQuery();
    }

    @Override
    protected SolrSpecification getSpecification() {
        return this.specify();
    }

    public void addFacetQuery(SolrQBCall<Solr${tableMap.schema}CQ> qbLambda) {
        if (this.facetQueryList == null) {
            this.facetQueryList = new ArrayList<Solr${tableMap.schema}CQ>();
        }
        Solr${tableMap.schema}CQ queryBean = new Solr${tableMap.schema}CQ();
        qbLambda.callback(queryBean);
        facetQueryList.add(queryBean);
    }

    @Override
    public List<? extends SolrQueryBean> getFacetQueryList() {
        if (this.facetQueryList == null) {
            this.facetQueryList = new ArrayList<Solr${tableMap.schema}CQ>();
        }
        return facetQueryList;
    }

    public HpSpecification facetSpecify() {
        if (this.facetSpecification == null) {
            this.facetSpecification = new HpSpecification();
        }
        return this.facetSpecification;
    }

    @Override
    protected SolrSpecification getFacetSpecification() {
        return this.facetSpecify();
    }

    public static class HpSpecification extends AbstractSolrSpecification {
        // ===================================================================================
        //                                                                        SpricyColumn
        //                                                                        ============
#foreach ($column in $request.columnList)
#if(${column.stored})
        public void field${column.capCamelName}() {
            this.addSpecifyField(Solr${tableMap.schema}Dbm.${column.capCamelName});
        }
#end
#end
    }
}
