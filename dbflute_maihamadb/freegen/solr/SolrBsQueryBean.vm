##
## Copyright 2014-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${manager.allClassCopyright}package ${data.solr.package}.cbean.cq.bs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrQuery.SortClause;
import org.dbflute.solr.cbean.AbstractSolrQueryBean;
import org.dbflute.solr.cbean.SolrQBCall;
import org.dbflute.solr.cbean.SolrQueryBuilder;
import org.dbflute.solr.cbean.SolrQueryLogicalOperator;
import org.dbflute.solr.cbean.SolrSetRangeSearchBean;
import org.dbflute.util.DfCollectionUtil;
import org.dbflute.util.DfStringUtil;

import ${data.solr.package}.bsentity.meta.Solr${data.solr.tableMap.schema}Dbm;
import ${data.solr.package}.cbean.cq.Solr${data.solr.tableMap.schema}CQ;

/**
 * Base Query class of Solr schema "${data.solr.tableMap.schema}."
 * @author FreeGen
 */
public class SolrBs${data.solr.tableMap.schema}CQ extends AbstractSolrQueryBean {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($column in $data.solr.columnList)
#if($column.indexed == true)
    /** Query Attribute for ${column.name} (${column.nativeType}) */
    protected Map<String, String> ${column.uncapCamelName}QueryMap = new LinkedHashMap<String, String>();

#end
#end
    // ===================================================================================
    //                                                                          Conditions
    //                                                                          ==========
    /* Enable sort by score as default */
    public void addOrderBy_Score_Desc() {
        SortClause clause = new SortClause("score", ORDER.desc);
        solrSortClauseList.add(clause);
    }

    public void addOrderBy_Score_Asc() {
        SortClause clause = new SortClause("score", ORDER.asc);
        solrSortClauseList.add(clause);
    }
#foreach ($column in $data.solr.columnList)
#if($column.indexed == true)
#set ($type = $column.type.replace("[]", ""))

    // ===========================================================
    // Query Setter for ${column.name} (${column.nativeType})
    //                                                  ==========
    /**
     * ExistsQuery( q=${column.name}:* )
     */
    public void set${column.capCamelName}_Exists() {
        SolrQueryBuilder.assertNullQuery("${column.name}_Exists", this.${column.uncapCamelName}QueryMap.get("${column.name}_Exists"));
        this.${column.uncapCamelName}QueryMap.put("${column.name}_Exists", SolrQueryBuilder.queryBuilderForExists("${column.name}"));
    }

    /**
     * ExistsQuery( q=NOT ${column.name}:* )
     */
    public void set${column.capCamelName}_NotExists() {
        SolrQueryBuilder.assertNullQuery("${column.name}_NotExists", this.${column.uncapCamelName}QueryMap.get("${column.name}_NotExists"));
        this.${column.uncapCamelName}QueryMap.put("${column.name}_NotExists", SolrQueryBuilder.wrapNotGroupQuery(SolrQueryBuilder.queryBuilderForExists("${column.name}"), false));
    }

    /**
     * ExistsQuery( q=(query OR (NOT ${column.name}:*)) )
     */
    public void add${column.capCamelName}_NotExists() {
        String value = null;
        if (!this.${column.uncapCamelName}QueryMap.isEmpty()) {
            List<String> list = DfCollectionUtil.newArrayList(this.${column.uncapCamelName}QueryMap.values());
            value = list.get(list.size() - 1);
        }
        SolrQueryBuilder.assertNotNullQuery("${column.name}", value);
        this.${column.uncapCamelName}QueryMap.put("${column.name}", SolrQueryBuilder.wrapGroupQuery(SolrQueryBuilder.concatEachCondition(Arrays.asList(value, SolrQueryBuilder.wrapNotGroupQuery(SolrQueryBuilder.queryBuilderForExists("${column.name}"), true)), SolrQueryLogicalOperator.OR)));
    }

    public void set${column.capCamelName}_Equal(${type} query) {
        SolrQueryBuilder.assertNullQuery("${column.name}_Equal", this.${column.uncapCamelName}QueryMap.get("${column.name}_Equal"));
#if(${type} == "String")
        if (DfStringUtil.is_NotNull_and_NotEmpty(query)) {
#else
        if (query != null) {
#end
            this.${column.uncapCamelName}QueryMap.put("${column.name}_Equal", SolrQueryBuilder.queryBuilderForEqual("${column.name}", query.toString()));
        }
    }

    public void set${column.capCamelName}_NotEqual(${type} query) {
        SolrQueryBuilder.assertNullQuery("${column.name}_NotEqual", this.${column.uncapCamelName}QueryMap.get("${column.name}_NotEqual"));
#if(${type} == "String")
        if (DfStringUtil.is_NotNull_and_NotEmpty(query)) {
#else
        if (query != null) {
#end
            this.${column.uncapCamelName}QueryMap.put("${column.name}_NotEqual", SolrQueryBuilder.wrapNotGroupQuery(SolrQueryBuilder.queryBuilderForEqual("${column.name}", query.toString()), false));
        }
    }
#if($column.nativeType == "string")

    public void set${column.capCamelName}_InScope(Collection<${type}> queryList) {
        this.set${column.capCamelName}_InScope(queryList, SolrQueryLogicalOperator.OR);
    }

    public void set${column.capCamelName}_InScope(Collection<${type}> queryList, SolrQueryLogicalOperator operator) {
        SolrQueryBuilder.assertNullQuery("${column.name}_InScope", this.${column.uncapCamelName}QueryMap.get("${column.name}_InScope"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, operator);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_InScope", convertedQuery);
        }
    }

    public void set${column.capCamelName}_NotInScope(Collection<${type}> queryList) {
        SolrQueryBuilder.assertNullQuery("${column.name}_NotInScope", this.${column.uncapCamelName}QueryMap.get("${column.name}_NotInScope"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, SolrQueryLogicalOperator.NOT);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_NotInScope", convertedQuery);
        }
    }

    public void set${column.capCamelName}_PrefixSearch(${type} query) {
        SolrQueryBuilder.assertNullQuery("${column.name}_PrefixSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_PrefixSearch"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForPrefixSearch("${column.name}", query);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_PrefixSearch", convertedQuery);
        }
    }

    public void set${column.capCamelName}_RangeSearchFrom(${type} from) {
        if (DfStringUtil.is_NotNull_and_NotEmpty(from)) {
            set${column.capCamelName}_RangeSearch(from, null);
        }
    }

    public void set${column.capCamelName}_RangeSearchTo(${type} to) {
        if (DfStringUtil.is_NotNull_and_NotEmpty(to)) {
            set${column.capCamelName}_RangeSearch(null, to);
        }
    }

    public void set${column.capCamelName}_RangeSearch(${type} from, ${type} to) {
        SolrQueryBuilder.assertNullQuery("${column.name}_RangeSearc", this.${column.uncapCamelName}QueryMap.get("${column.name}_RangeSearc"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_RangeSearc", convertedQuery);
        }
    }

    public void set${column.capCamelName}_SetRangeSearch(String cd, ${type} from, ${type} to) {
        SolrQueryBuilder.assertNullQuery("${column.name}_SetRangeSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_SetRangeSearch"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForSetRangeSearch("${column.name}", cd, from, to, SET_RANGE_SEARCH_PADDING_LENGTH, PADDING_STR);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_SetRangeSearch", convertedQuery);
        }
    }

    public void set${column.capCamelName}_SetRangeSearchInScope(Collection<SolrSetRangeSearchBean> beanList) {
        SolrQueryBuilder.assertNullQuery("${column.name}_SetRangeSearchInScope", this.${column.uncapCamelName}QueryMap.get("${column.name}_SetRangeSearchInScope"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForSetRangeSearchInScope("${column.name}", beanList, SET_RANGE_SEARCH_PADDING_LENGTH, PADDING_STR);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_SetRangeSearchInScope", convertedQuery);
        }
    }

    public void addOrderBy_${column.capCamelName}_Desc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.desc);
        solrSortClauseList.add(clause);
    }

    public void addOrderBy_${column.capCamelName}_Asc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.asc);
        solrSortClauseList.add(clause);
    }
#elseif($column.nativeType == "tint" || $column.nativeType == "tlong" || $column.nativeType == "long" || $column.nativeType == "tdouble")

    public void set${column.capCamelName}_InScope(Collection<${type}> queryList) {
        this.set${column.capCamelName}_InScope(queryList, SolrQueryLogicalOperator.OR);
    }

    public void set${column.capCamelName}_InScope(Collection<${type}> queryList, SolrQueryLogicalOperator operator) {
        SolrQueryBuilder.assertNullQuery("${column.name}_InScope", this.${column.uncapCamelName}QueryMap.get("${column.name}_InScope"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForSearchList("${column.name}", queryList, operator);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_InScope", convertedQuery);
        }
    }

    public void set${column.capCamelName}_NotInScope(Collection<${type}> queryList) {
        SolrQueryBuilder.assertNullQuery("${column.name}_NotInScope", this.${column.uncapCamelName}QueryMap.get("${column.name}_NotInScope"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForSearchList("${column.name}", queryList, SolrQueryLogicalOperator.NOT);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_NotInScope", convertedQuery);
        }
    }

    public void set${column.capCamelName}_RangeSearchFrom(${type} from) {
        if (from != null) {
            set${column.capCamelName}_RangeSearch(from, null);
        }
    }

    public void set${column.capCamelName}_RangeSearchTo(${type} to) {
        if (to != null) {
            set${column.capCamelName}_RangeSearch(null, to);
        }
    }

    public void set${column.capCamelName}_RangeSearch(${type} from, ${type} to) {
        SolrQueryBuilder.assertNullQuery("${column.name}_RangeSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_RangeSearch"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_RangeSearch", convertedQuery);
        }
    }

    public void addOrderBy_${column.capCamelName}_Desc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.desc);
        solrSortClauseList.add(clause);
    }

    public void addOrderBy_${column.capCamelName}_Asc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.asc);
        solrSortClauseList.add(clause);
    }
#elseif($column.nativeType == "boolean")

    public void addOrderBy_${column.capCamelName}_Desc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.desc);
        solrSortClauseList.add(clause);
    }

    public void addOrderBy_${column.capCamelName}_Asc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.asc);
        solrSortClauseList.add(clause);
    }
#elseif($column.nativeType == "tdate")

    public void set${column.capCamelName}_RangeSearchFrom(${type} from) {
        if (from != null) {
            set${column.capCamelName}_RangeSearch(from, null);
        }
    }

    public void set${column.capCamelName}_RangeSearchTo(${type} to) {
        if (to != null) {
            set${column.capCamelName}_RangeSearch(null, to);
        }
    }

    public void set${column.capCamelName}_RangeSearch(${type} from, ${type} to) {
        SolrQueryBuilder.assertNullQuery("${column.name}_RangeSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_RangeSearch"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_RangeSearch", convertedQuery);
        }
    }

    public void addOrderBy_${column.capCamelName}_Desc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.desc);
        solrSortClauseList.add(clause);
    }

    public void addOrderBy_${column.capCamelName}_Asc() {
        SortClause clause = new SortClause(Solr${data.solr.tableMap.schema}Dbm.${column.capCamelName}.fieldName(), ORDER.asc);
        solrSortClauseList.add(clause);
    }
#elseif($column.nativeType == "text_ja")

    public void set${column.capCamelName}_FreewordSearch(${type} queryStrs, SolrQueryLogicalOperator operator) {
        SolrQueryBuilder.assertNullQuery("${column.name}_FreewordSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_FreewordSearch"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForFreewordSearch("${column.name}", queryStrs, operator);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_FreewordSearch", convertedQuery);
        }
    }

    public void set${column.capCamelName}_FreewordSearch(Collection<${type}> queryList, SolrQueryLogicalOperator operator) {
        SolrQueryBuilder.assertNullQuery("${column.name}_FreewordSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_FreewordSearch"));
        String convertedQuery  = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, operator);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_FreewordSearch", convertedQuery);
        }
    }
#elseif($column.nativeType == "text_cjk")

    public void set${column.capCamelName}_FreewordSearch(${type} queryStrs, SolrQueryLogicalOperator operator) {
        SolrQueryBuilder.assertNullQuery("${column.name}_FreewordSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_FreewordSearch"));
        String convertedQuery = SolrQueryBuilder.queryBuilderForFreewordSearch("${column.name}", queryStrs, operator);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_FreewordSearch", convertedQuery);
        }
    }

    public void set${column.capCamelName}_FreewordSearch(Collection<${type}> queryList, SolrQueryLogicalOperator operator) {
        SolrQueryBuilder.assertNullQuery("${column.name}_FreewordSearch", this.${column.uncapCamelName}QueryMap.get("${column.name}_FreewordSearch"));
        String convertedQuery  = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, operator);
        if (DfStringUtil.is_NotNull_and_NotEmpty(convertedQuery)) {
            this.${column.uncapCamelName}QueryMap.put("${column.name}_FreewordSearch", convertedQuery);
        }
    }
#end
#end
#end

    /**
     * OR condition
     * @param orQueryLambda ConditionBean function for Solr for generating OR-combined condition (NotNull)
     */
    public void orScopeQuery(SolrQBCall<Solr${data.solr.tableMap.schema}CQ> orQueryLambda) {
        Solr${data.solr.tableMap.schema}CQ queryBean = new Solr${data.solr.tableMap.schema}CQ();
        orQueryLambda.callback(queryBean);
        addNestQuery(queryBean, SolrQueryLogicalOperator.OR);
    }

    /**
     * AND condition(s) nested in OR condition
     * @param orQueryAndPartLambda ConditionBean function for Solr for generating OR-combined condition (NotNull)
     */
    public void orScopeQueryAndPart(SolrQBCall<Solr${data.solr.tableMap.schema}CQ> orQueryAndPartLambda) {
        Solr${data.solr.tableMap.schema}CQ queryBean = new Solr${data.solr.tableMap.schema}CQ();
        orQueryAndPartLambda.callback(queryBean);
        addNestQuery(queryBean, SolrQueryLogicalOperator.AND);
    }

    // ===================================================================================
    //                                                                        Query Getter
    //                                                                        ============
    @Override
    public List<String> getQueryList() {
        List<String> queryList = new ArrayList<String>();
        if (DfStringUtil.is_NotNull_and_NotEmpty(dismaxQuery)) {
            queryList.add(dismaxQuery);
        }

#foreach ($column in $data.solr.columnList)
#if($column.indexed == true)
        queryList.addAll(${column.uncapCamelName}QueryMap.values());
#end
#end

        List<String> nestQueryList = getNestQueryList();
        if (!nestQueryList.isEmpty()) {
            queryList.addAll(nestQueryList);
        }
        return queryList;
    }
}
